From fbf407aeef2b0d2729cb4fe81a393ac4994ec4b5 Mon Sep 17 00:00:00 2001
From: JoyingKyc <joying.kuo@mediatek.com>
Date: Wed, 10 Apr 2024 15:50:49 +0800
Subject: [PATCH] tflite: update opaque api

Signed-off-by: JoyingKyc <joying.kuo@mediatek.com>
---
 tensorflow/lite/core/c/c_api_opaque.cc | 119 +++++++++++++++++++++++++
 tensorflow/lite/core/c/c_api_opaque.h  |  76 ++++++++++++++++
 2 files changed, 195 insertions(+)

diff --git a/tensorflow/lite/core/c/c_api_opaque.cc b/tensorflow/lite/core/c/c_api_opaque.cc
index f889f5a5899..ba803a1c0da 100644
--- a/tensorflow/lite/core/c/c_api_opaque.cc
+++ b/tensorflow/lite/core/c/c_api_opaque.cc
@@ -27,6 +27,7 @@ limitations under the License.
 #include "tensorflow/lite/core/subgraph.h"
 #include "tensorflow/lite/kernels/kernel_util.h"
 #include "tensorflow/lite/string_util.h"
+#include "tensorflow/lite/util.h"
 
 namespace {
 
@@ -89,6 +90,14 @@ const ::tflite::Subgraph* GetSubgraph(
 }
 }  // namespace
 
+struct TfLiteOpaqueTensorBuilder {
+  TfLiteType type;
+  void* data;
+  TfLiteAllocationType allocation_type;
+  TfLiteQuantizationParams quantization_params;
+  TfLiteQuantization quantization;
+};
+
 TfLiteType TfLiteOpaqueTensorType(const TfLiteOpaqueTensor* opaque_tensor) {
   return TfLiteTensorType(reinterpret_cast<const TfLiteTensor*>(opaque_tensor));
 }
@@ -207,6 +216,44 @@ TfLiteStatus TfLiteOpaqueTensorWriteString(TfLiteOpaqueTensor* tensor,
   return kTfLiteOk;
 }
 
+TfLiteOpaqueTensorBuilder* TfLiteOpaqueTensorBuilderCreate() {
+  return new TfLiteOpaqueTensorBuilder{};
+}
+
+void TfLiteOpaqueTensorBuilderDelete(TfLiteOpaqueTensorBuilder* builder) {
+  delete builder;
+}
+
+TfLiteOpaqueTensorBuilder* TfLiteOpaqueTensorBuilderSetType(
+    TfLiteOpaqueTensorBuilder* builder, TfLiteType type) {
+  builder->type = type;
+  return builder;
+}
+
+TfLiteOpaqueTensorBuilder* TfLiteOpaqueTensorBuilderSetData(
+    TfLiteOpaqueTensorBuilder* builder, void* data) {
+  builder->data = data;
+  return builder;
+}
+
+TfLiteOpaqueTensorBuilder* TfLiteOpaqueTensorBuilderSetAllocationType(
+    TfLiteOpaqueTensorBuilder* builder, TfLiteAllocationType allocation_type) {
+  builder->allocation_type = allocation_type;
+  return builder;
+}
+
+TfLiteOpaqueTensorBuilder* TfLiteOpaqueTensorBuilderSetQuantizationParams(
+    TfLiteOpaqueTensorBuilder* builder, TfLiteQuantizationParams params) {
+  builder->quantization_params = params;
+  return builder;
+}
+
+TfLiteOpaqueTensorBuilder* TfLiteOpaqueTensorBuilderSetQuantization(
+    TfLiteOpaqueTensorBuilder* builder, TfLiteQuantization quantization) {
+  builder->quantization = quantization;
+  return builder;
+}
+
 const TfLiteOpaqueTensor* TfLiteOpaqueNodeGetInput(
     const TfLiteOpaqueContext* opaque_context,
     const TfLiteOpaqueNode* opaque_node, int index) {
@@ -273,6 +320,24 @@ TfLiteStatus TfLiteOpaqueNodeTemporaries(const TfLiteOpaqueNode* opaque_node,
   return kTfLiteOk;
 }
 
+int TfLiteOpaqueNodeGetInputTensorIndex(const TfLiteOpaqueNode* opaque_node,
+                                        int index_of_input) {
+  auto* node = Convert(opaque_node);
+  if (index_of_input < 0 || index_of_input >= node->inputs->size) {
+    return -1;
+  }
+  return node->inputs->data[index_of_input];
+}
+
+int TfLiteOpaqueNodeGetOutputTensorIndex(const TfLiteOpaqueNode* opaque_node,
+                                         int index_of_output) {
+  auto* node = Convert(opaque_node);
+  if (index_of_output < 0 || index_of_output >= node->outputs->size) {
+    return -1;
+  }
+  return node->outputs->data[index_of_output];
+}
+
 TfLiteStatus TfLiteOpaqueContextGetExecutionPlan(
     TfLiteOpaqueContext* opaque_context, TfLiteIntArray** execution_plan) {
   // The following casts are safe only because this code is part of the
@@ -456,6 +521,60 @@ TfLiteStatus TfLiteOpaqueContextGetNodeInitDataMmapInfo(
                                            custom_initial_data_size);
 }
 
+TfLiteStatus TfLiteOpaqueContextAddTensor(TfLiteOpaqueContext* context,
+                                          TfLiteOpaqueTensorBuilder* builder,
+                                          int* new_tensor_index) {
+  if (builder->allocation_type != kTfLiteDynamic &&
+      builder->allocation_type != kTfLiteArenaRw &&
+      builder->allocation_type != kTfLiteArenaRwPersistent) {
+    TfLiteOpaqueContextReportError(
+        context,
+        "Invalid allocation type '%d'.  Allocation type for "
+        "TfLiteOpaqueContextAddTensor must be one of: "
+        "'kTfLiteDynamic', 'kTfLiteArenaRw' or 'kTfLiteArenaRwPersistent'.",
+        builder->allocation_type);
+    return kTfLiteError;
+  }
+
+  if (builder->allocation_type == kTfLiteDynamic && builder->data == nullptr) {
+    TfLiteOpaqueContextReportError(context,
+                                   "For tensors of allocation type "
+                                   "'kTfLiteDynamic' 'data' must be provided.");
+    return kTfLiteError;
+  }
+  if ((builder->allocation_type == kTfLiteArenaRw ||
+       builder->allocation_type == kTfLiteArenaRwPersistent) &&
+      builder->data != nullptr) {
+    TfLiteOpaqueContextReportError(
+        context,
+        "For tensors of allocation type "
+        "'kTfLiteArenaRw' or 'kTfLiteArenaRwPersistent' "
+        "'data' must not be provided.");
+    return kTfLiteError;
+  }
+
+  auto* tflite_context = Convert(context);
+  int index = -1;
+  auto status = tflite_context->AddTensors(tflite_context, 1, &index);
+  if (status != kTfLiteOk) return status;
+
+  tflite_context->tensors[index].type = builder->type;
+  tflite_context->tensors[index].data.data = builder->data;
+  tflite_context->tensors[index].allocation_type = builder->allocation_type;
+  tflite_context->tensors[index].params = builder->quantization_params;
+  tflite_context->tensors[index].quantization = builder->quantization;
+  if (new_tensor_index != nullptr) {
+    *new_tensor_index = index;
+  }
+  return status;
+}
+
+TfLiteStatus TfLiteOpaqueContextGetSizeOfType(TfLiteOpaqueContext* context,
+                                              const TfLiteType type,
+                                              size_t* bytes) {
+  return tflite::GetSizeOfType(Convert(context), type, bytes);
+}
+
 void TfLiteOpaqueContextReportError(struct TfLiteOpaqueContext* opaque_context,
                                     const char* format, ...) {
   va_list vlist;
diff --git a/tensorflow/lite/core/c/c_api_opaque.h b/tensorflow/lite/core/c/c_api_opaque.h
index 44c95a51d4e..e73e9e8a40f 100644
--- a/tensorflow/lite/core/c/c_api_opaque.h
+++ b/tensorflow/lite/core/c/c_api_opaque.h
@@ -15,6 +15,8 @@ limitations under the License.
 #ifndef TENSORFLOW_LITE_CORE_C_C_API_OPAQUE_H_
 #define TENSORFLOW_LITE_CORE_C_C_API_OPAQUE_H_
 
+#include <stddef.h>
+
 #include "tensorflow/lite/core/c/c_api.h"
 #include "tensorflow/lite/core/c/c_api_types.h"  // IWYU pragma: export
 #include "tensorflow/lite/core/c/common.h"
@@ -171,6 +173,48 @@ TfLiteStatus TfLiteOpaqueTensorWriteStrings(TfLiteOpaqueTensor* tensor,
 TfLiteStatus TfLiteOpaqueTensorWriteString(TfLiteOpaqueTensor* tensor,
                                            const char* str, int len);
 
+// An opaque type to create a tensor.
+typedef struct TfLiteOpaqueTensorBuilder TfLiteOpaqueTensorBuilder;
+
+// Creates an opaque tensor builder object.
+TfLiteOpaqueTensorBuilder* TfLiteOpaqueTensorBuilderCreate();
+
+// Deletes an opaque tensor builder object.
+void TfLiteOpaqueTensorBuilderDelete(TfLiteOpaqueTensorBuilder* builder);
+
+// Sets the 'TfLiteType' of the provided 'builder' to the provided 'type'.
+// Returns the address of the provided 'builder', so that builder calls can be
+// chained together.
+TfLiteOpaqueTensorBuilder* TfLiteOpaqueTensorBuilderSetType(
+    TfLiteOpaqueTensorBuilder* builder, TfLiteType type);
+
+// Sets the raw data of the provided 'builder' to the provided 'data'. Returns
+// the address of the provided 'builder', so that builder calls can be chained
+// together.
+TfLiteOpaqueTensorBuilder* TfLiteOpaqueTensorBuilderSetData(
+    TfLiteOpaqueTensorBuilder* builder, void* data);
+
+// Sets the allocation type of the provided 'builder' to the provided
+// 'allocation_type'.  The 'allocation_type' must be one of the following:
+// 'kTfLiteDynamic', 'kTfLiteArenaRw' or 'kTfLiteArenaRwPersistent'.  If the
+// provided 'allocation_type' is not one of those values then
+// 'TfLiteOpaqueContextAddTensor' will return an error. Returns the address of
+// the provided 'builder', so that builder calls can be chained together.
+TfLiteOpaqueTensorBuilder* TfLiteOpaqueTensorBuilderSetAllocationType(
+    TfLiteOpaqueTensorBuilder* builder, TfLiteAllocationType allocation_type);
+
+// Sets the quantization params of the provided 'builder' to the provided
+// 'params'. Returns the address of the provided 'builder', so that builder
+// calls can be chained together.
+TfLiteOpaqueTensorBuilder* TfLiteOpaqueTensorBuilderSetQuantizationParams(
+    TfLiteOpaqueTensorBuilder* builder, TfLiteQuantizationParams params);
+
+// Sets the quantization of the provided 'builder' to the provided
+// 'quantization'. Returns the address of the provided 'builder', so that
+// builder calls can be chained together.
+TfLiteOpaqueTensorBuilder* TfLiteOpaqueTensorBuilderSetQuantization(
+    TfLiteOpaqueTensorBuilder* builder, TfLiteQuantization quantization);
+
 // --------------------------------------------------------------------------
 // Accessors for TfLiteOpaqueNode.
 
@@ -269,6 +313,22 @@ TfLiteStatus TfLiteOpaqueNodeTemporaries(const TfLiteOpaqueNode* opaque_node,
                                          const int** temporaries,
                                          int* num_temporaries);
 
+// Given an 'index_of_input', which must be in the range of [0, N), where N is
+// the number of input tensors of the provided 'opaque_node', returns the
+// (global) index of the tensor that holds the input.  Returns -1 if
+// 'index_of_input' is not within the [0, N) range.
+TFL_CAPI_EXPORT
+int TfLiteOpaqueNodeGetInputTensorIndex(const TfLiteOpaqueNode* opaque_node,
+                                        int index_of_input);
+
+// Given an 'index_of_output', which must be in the range of [0, N), where N is
+// the number of output tensors of the provided 'opaque_node', returns the
+// (global) index of the tensor that holds the output.  Returns -1 if
+// 'index_of_output' is not within the [0, N) range.
+TFL_CAPI_EXPORT
+int TfLiteOpaqueNodeGetOutputTensorIndex(const TfLiteOpaqueNode* opaque_node,
+                                         int index_of_output);
+
 // --------------------------------------------------------------------------
 // Accessors for TfLiteOpaqueContext.
 
@@ -500,6 +560,22 @@ TfLiteStatus TfLiteOpaqueContextGetNodeInitDataMmapInfo(
     int64_t* custom_initial_data_offset_in_file,
     int64_t* custom_initial_data_size);
 
+// Adds an additional tensor and configures its properties based on the provided
+// 'builder', preserving pre-existing Tensor entries.  If non-null, the value
+// pointed to by 'new_tensor_index' will be set to the index of the
+// new tensor.  Returns 'kTfLiteOk' when the tensor has been added
+// successfully.  Returns 'kTfLiteError' in case of failure.
+TFL_CAPI_EXPORT
+TfLiteStatus TfLiteOpaqueContextAddTensor(TfLiteOpaqueContext* context,
+                                          TfLiteOpaqueTensorBuilder* builder,
+                                          int* new_tensor_index);
+
+// Populates the size in bytes of a provide 'type' into 'bytes'.  Returns
+// 'kTfLiteOk' for valid types, and 'kTfLiteError' otherwise.
+TFL_CAPI_EXPORT
+TfLiteStatus TfLiteOpaqueContextGetSizeOfType(TfLiteOpaqueContext* context,
+                                              TfLiteType type, size_t* bytes);
+
 /// Reports an error message formed by using the provided 'format' string in
 /// combination with the data provided via the unnamed arguments following
 /// the 'format' parameter ('...').  The intended usage and behavior is the same
-- 
2.18.0

