From fb63aa2b6a1fd6a8cf5f051c2a7ae87ea99fbf00 Mon Sep 17 00:00:00 2001
From: Julien STEPHAN <jstephan@baylibre.com>
Date: Tue, 29 Dec 2020 15:25:40 +0000
Subject: [PATCH 4/5] add Makefile

Signed-off-by: Julien STEPHAN <jstephan@baylibre.com>
---
 Makefile      | 55 +++++++++++++++++++++++++++++++++++++++++++++++++++
 nn-driver.cpp | 28 ++++++++++++++++++++++++++
 2 files changed, 83 insertions(+)
 create mode 100644 Makefile
 create mode 100644 nn-driver.cpp

diff --git a/Makefile b/Makefile
new file mode 100644
index 0000000..58d6c35
--- /dev/null
+++ b/Makefile
@@ -0,0 +1,54 @@
+SRC :=  \
+	1.0/ArmnnDriverImpl.cpp \
+	1.0/HalPolicy.cpp \
+	1.1/ArmnnDriverImpl.cpp \
+	1.1/HalPolicy.cpp \
+	1.2/ArmnnDriverImpl.cpp \
+	1.2/HalPolicy.cpp \
+	1.3/ArmnnDriverImpl.cpp \
+	1.3/HalPolicy.cpp \
+	ArmnnDevice.cpp \
+	ArmnnDriverImpl.cpp \
+	ArmnnPreparedModel.cpp \
+	ArmnnPreparedModel_1_2.cpp \
+	ArmnnPreparedModel_1_3.cpp \
+	ConversionUtils.cpp \
+	CacheDataHandler.cpp \
+	DriverOptions.cpp \
+	ModelToINetworkConverter.cpp \
+	RequestThread.cpp \
+	RequestThread_1_3.cpp \
+	Utils.cpp \
+	nn-driver.cpp
+
+OBJECTS := $(SRC:.cpp=.o)
+LIBNAME := libvendor-nn-hal.so.1.0
+SONAME  := libvendor-nn-hal.so.1
+SOLINK  := libvendor-nn-hal.so
+
+
+NNAPI_INCLUDE ?= /usr/include/nnapi
+
+DEFINES =  -D __ANDROID_API__=30 -D __ANDROID_API_O_MR1__=27 -D __ANDROID_API_P__=28 -D __ANDROID_API_Q__=29 -D __ANDROID_API_R__=30 -D __ANDROID_API_FUTURE__=10000
+
+DEFINES +=  -DARMCOMPUTECL_ENABLED -DARMNN_ANDROID_R -DARMNN_ANDROID_NN_V1_3  -DBOOST_NO_AUTO_PTR -DARMCOMPUTENEON_ENABLED -DARMNNREF_ENABLED -DARMNNETHOSN_ENABLED -DRETIRE_RATE=3
+
+INCLUDES = -I $(ARMNN_INCLUDE) -I $(ARMNN_UTILS_INCLUDE) -I $(AOSP_INCLUDE)  -I $(NNAPI_INCLUDE)/nn/runtime/include -I $(NNAPI_INCLUDE)/nn/chromeos/includes -I $(NNAPI_INCLUDE)/nn/common/ -I $(NNAPI_INCLUDE)/nn/common/include -I $(NNAPI_INCLUDE)/nn/common/random -I ${ROOT_DIR_INCLUDE}
+
+CFLAGS = -Wall -Wextra -std=c++17 -fPIC -fvisibility=default -Wno-inconsistent-missing-override -Wno-sign-compare -Wl,--no-as-needed -Wl,--no-undefined -fexceptions -Wno-format-security -Wno-unused-parameter -Wno-unused-variable -Wno-unneeded-internal-declaration -Wno-unused-function
+
+CXXFLAGS += $(DEFINES) $(INCLUDES) $(CFLAGS)
+
+LIBS = -larmnn
+
+$(LIBNAME): $(OBJECTS)
+	$(CC) -shared -Wl,-soname,$(SONAME) -o $@ $^ -lpthread -lrt -ltensorflowlite ${LIBS}
+
+install: $(LIBNAME)
+	mkdir -p $(DESTDIR)/$(LIBDIR)/
+	cp $(LIBNAME) $(DESTDIR)/$(LIBDIR)/
+	ln -sf $(LIBNAME) $(DESTDIR)/$(LIBDIR)/$(SONAME)
+	ln -sf $(LIBNAME) $(DESTDIR)/$(LIBDIR)/$(SOLINK)
+
+clean:
+	rm -rf $(OBJECTS) $(LIBNAME)
diff --git a/nn-driver.cpp b/nn-driver.cpp
new file mode 100644
index 0000000..5efa953
--- /dev/null
+++ b/nn-driver.cpp
@@ -0,0 +1,28 @@
+// Copyright 2020 The Chromium OS Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "ArmnnDriver.hpp"
+
+using namespace armnn_driver;
+
+namespace android {
+namespace hardware {
+namespace neuralnetworks {
+namespace V1_0 {
+
+// static
+// This registers the SampleDriverFull into the DeviceManager.
+::android::sp<IDevice> IDevice::getService(const std::string& /*serviceName*/,
+                                           bool /*dummy*/) {
+  // TODO: Make this more dynamic so we can easily change the
+  //       driver.
+  const std::vector<armnn::BackendId> compute_devices = {{armnn::Compute::GpuAcc, armnn::Compute::CpuAcc}};
+  return new ArmnnDriver(DriverOptions(compute_devices , false));
+
+}
+
+}  // namespace V1_0
+}  // namespace neuralnetworks
+}  // namespace hardware
+}  // namespace android
