From 5c087dbeabb772e9528fdda8fa7a72cf663348c9 Mon Sep 17 00:00:00 2001
From: Julien STEPHAN <jstephan@baylibre.com>
Date: Tue, 9 Nov 2021 13:28:45 +0100
Subject: [PATCH] replace steady_clock by high_resolution_clock

Signed-off-by: Julien STEPHAN <jstephan@baylibre.com>
---
 ArmnnPreparedModel_1_2.cpp | 6 +++---
 ArmnnPreparedModel_1_3.cpp | 6 +++---
 RequestThread.hpp          | 4 ++--
 RequestThread_1_3.hpp      | 2 +-
 4 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/ArmnnPreparedModel_1_2.cpp b/ArmnnPreparedModel_1_2.cpp
index 5a10d54..75773a1 100644
--- a/ArmnnPreparedModel_1_2.cpp
+++ b/ArmnnPreparedModel_1_2.cpp
@@ -27,11 +27,11 @@ namespace {
 
 static const V1_2::Timing g_NoTiming = {.timeOnDevice = UINT64_MAX, .timeInDriver = UINT64_MAX};
 using namespace armnn_driver;
-using TimePoint = std::chrono::steady_clock::time_point;
+using TimePoint = std::chrono::high_resolution_clock::time_point;
 
 TimePoint Now()
 {
-    return std::chrono::steady_clock::now();
+    return std::chrono::high_resolution_clock::now();
 }
 
 unsigned long MicrosecondsDuration(TimePoint endPoint, TimePoint startPoint)
@@ -770,7 +770,7 @@ void ArmnnPreparedModel_1_2<HalVersion>::ArmnnThreadPoolCallback_1_2<CallbackCon
 
     if (m_CallbackContext.ctx.measureTimings == V1_2::MeasureTiming::YES)
     {
-        driverEnd = std::chrono::steady_clock::now();
+        driverEnd = std::chrono::high_resolution_clock::now();
         V1_2::Timing timing;
         timing.timeOnDevice = MicrosecondsDuration(timeTaken.second, timeTaken.first);
         timing.timeInDriver = MicrosecondsDuration(driverEnd, m_CallbackContext.ctx.driverStart);
diff --git a/ArmnnPreparedModel_1_3.cpp b/ArmnnPreparedModel_1_3.cpp
index 9522886..260c801 100644
--- a/ArmnnPreparedModel_1_3.cpp
+++ b/ArmnnPreparedModel_1_3.cpp
@@ -32,11 +32,11 @@ namespace {
 
 static const V1_2::Timing g_NoTiming = {.timeOnDevice = UINT64_MAX, .timeInDriver = UINT64_MAX};
 using namespace armnn_driver;
-using TimePoint = std::chrono::steady_clock::time_point;
+using TimePoint = std::chrono::high_resolution_clock::time_point;
 
 TimePoint Now()
 {
-    return std::chrono::steady_clock::now();
+    return std::chrono::high_resolution_clock::now();
 }
 
 unsigned long MicrosecondsDuration(TimePoint endPoint, TimePoint startPoint)
@@ -1079,7 +1079,7 @@ void ArmnnPreparedModel_1_3<HalVersion>::ArmnnThreadPoolCallback_1_3<CallbackCon
     {
         m_CallbackContext.ctx.deviceStart = timeTaken.first;
         m_CallbackContext.ctx.deviceEnd = timeTaken.second;
-        m_CallbackContext.ctx.driverEnd = std::chrono::steady_clock::now();
+        m_CallbackContext.ctx.driverEnd = std::chrono::high_resolution_clock::now();
         V1_2::Timing timing;
         timing.timeOnDevice = MicrosecondsDuration(m_CallbackContext.ctx.deviceEnd, m_CallbackContext.ctx.deviceStart);
         timing.timeInDriver = MicrosecondsDuration(m_CallbackContext.ctx.driverEnd, m_CallbackContext.ctx.driverStart);
diff --git a/RequestThread.hpp b/RequestThread.hpp
index 79f309a..424458b 100644
--- a/RequestThread.hpp
+++ b/RequestThread.hpp
@@ -18,8 +18,8 @@
 
 namespace armnn_driver
 {
-using TimePoint = std::chrono::steady_clock::time_point;
-static const TimePoint g_Min = std::chrono::steady_clock::time_point::min();
+using TimePoint = std::chrono::high_resolution_clock::time_point;
+static const TimePoint g_Min = std::chrono::high_resolution_clock::time_point::min();
 
 template<template <typename HalVersion> class PreparedModel, typename HalVersion, typename CallbackContext>
 class RequestThread
diff --git a/RequestThread_1_3.hpp b/RequestThread_1_3.hpp
index c8abc5e..c7253dc 100644
--- a/RequestThread_1_3.hpp
+++ b/RequestThread_1_3.hpp
@@ -18,7 +18,7 @@
 
 namespace armnn_driver
 {
-using TimePoint = std::chrono::steady_clock::time_point;
+using TimePoint = std::chrono::high_resolution_clock::time_point;
 
 template<template <typename HalVersion> class PreparedModel, typename HalVersion, typename CallbackContext>
 class RequestThread_1_3
