From 9e4df3ec7cb779da75f6dd291ec203776a9b48d2 Mon Sep 17 00:00:00 2001
From: kidd <kidd-kw.chen@mediatek.com>
Date: Mon, 22 Nov 2021 14:17:49 +0800
Subject: [PATCH] xtensa-ann: fix link issue

fix link issue: ndefine references of GraphicBuffer and RpcThread when build cts of nnapi on linux.
On linux, there is no GraphicBuffer and RpcThread support.

Signed-off-by: kidd <kidd-kw.chen@mediatek.com>
---
 Makefile                       |  2 +-
 xtensa_driver/XtensaDriver.cpp | 12 ++++++++++--
 2 files changed, 11 insertions(+), 3 deletions(-)

diff --git a/Makefile b/Makefile
index d08749a..1867797 100644
--- a/Makefile
+++ b/Makefile
@@ -75,7 +75,7 @@ LIBNAME := libvendor-nn-hal.so.1.0
 SONAME  := libvendor-nn-hal.so.1
 SOLINK  := libvendor-nn-hal.so

-DEFINES =  -D __ANDROID_API__=30 -D __ANDROID_API_O_MR1__=27 -D __ANDROID_API_P__=28 -D __ANDROID_API_Q__=29 -D __ANDROID_API_R__=30 -D __ANDROID_API_FUTURE__
+DEFINES =  -D __ANDROID_API__=30 -D __ANDROID_API_O_MR1__=27 -D __ANDROID_API_P__=28 -D __ANDROID_API_Q__=29 -D __ANDROID_API_R__=30 -D __ANDROID_API_FUTURE__ -D NNAPI_CHROMEOS

 DEFINES += -DXCHAL_VISION_TYPE=6 -DINCLUDE_XI_CNN -DALLOW_INPUT_COEFFICIENTS=false -DHAVE_ATOMIC -DDISABLE_SOFTMAX_FP16=true -DDISABLE_LOG_SOFTMAX_FP16=true -DDISABLE_ROI_ALIGN_QUANT=false -DDISABLE_HEATMAP_MAX_KEYPOINT_QUANT=false -DDISABLE_BOX_WITH_NMS_LIMIT_QUANT=false -DDISABLE_GENERATE_PROPOSALS_QUANT=true -DDISABLE_AXIS_ALIGNED_BBOX_TRANSFORM_QUANT=false -DDISABLE_L2_NORM=false -DDISABLE_RESIZE=true -DDISABLE_EMBEDDING_LOOKUP=false -DDISABLE_HASHTABLE_LOOKUP=false -DHAVE___U64 -DHAVE___U32 -D__ANDROID__

diff --git a/xtensa_driver/XtensaDriver.cpp b/xtensa_driver/XtensaDriver.cpp
index d31c79d..10b79b6 100644
--- a/xtensa_driver/XtensaDriver.cpp
+++ b/xtensa_driver/XtensaDriver.cpp
@@ -212,9 +212,13 @@ RunTimePoolInfo::RunTimePoolInfoImpl::~RunTimePoolInfoImpl() {
         if (munmap(mBuffer, size)) {
             LOG(ERROR) << "RunTimePoolInfoImpl::~RunTimePoolInfo(): Can't munmap";
         }
-    } else if (memType == "hardware_buffer_blob") {
+    }
+#if !defined(NNAPI_CHROMEOS)
+    else if (memType == "hardware_buffer_blob") {
         mGraphicBuffer->unlock();
-    } else if (memType == "") {
+    }
+#endif
+    else if (memType == "") {
         // Represents a POINTER argument; nothing to do
     } else {
         LOG(ERROR) << "RunTimePoolInfoImpl::~RunTimePoolInfoImpl(): unsupported hidl_memory type";
@@ -272,6 +276,7 @@ std::optional<RunTimePoolInfo> RunTimePoolInfo::createFromHidlMemory(
             LOG(ERROR) << "RunTimePoolInfo::set(): Can't mmap the file descriptor.";
             return std::nullopt;
         }
+#if !defined(NNAPI_CHROMEOS)
     } else if (memType == "hardware_buffer_blob") {
         auto handle = hidlMemory.handle();
         auto format = AHARDWAREBUFFER_FORMAT_BLOB;
@@ -292,6 +297,7 @@ std::optional<RunTimePoolInfo> RunTimePoolInfo::createFromHidlMemory(
         }
         buffer = static_cast<uint8_t*>(gBuffer);
         prot = PROT_READ | PROT_WRITE;
+#endif
     } else {
         LOG(ERROR) << "RunTimePoolInfo::set(): unsupported hidl_memory type";
         return std::nullopt;
@@ -1275,6 +1281,7 @@ Return<void> XtensaDriver::allocate(const V1_3::BufferDesc& /*desc*/,
     return Void();
 }
 int XtensaDriver::run() {
+#if !defined(NNAPI_CHROMEOS)
     android::hardware::configureRpcThreadpool(4, true);
     if (registerAsService(mName) != android::OK) {
         LOG(ERROR) << "Could not register service";
@@ -1282,6 +1289,7 @@ int XtensaDriver::run() {
     }
     android::hardware::joinRpcThreadpool();
     LOG(ERROR) << "Service exited!";
+#endif
     return 1;
 }

--
2.18.0

