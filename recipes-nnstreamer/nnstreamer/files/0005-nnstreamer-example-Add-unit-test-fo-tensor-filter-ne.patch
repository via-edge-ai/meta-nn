From fd5f9615d468724558f2e4241861a1abe4305cc6 Mon Sep 17 00:00:00 2001
From: "kidd-kw.chen" <kidd-kw.chen@mediatek.com>
Date: Fri, 28 Apr 2023 10:38:31 +0800
Subject: [PATCH 3/3] nnstreamer-example: Add unit test fo tensor filter
 neuronsdk

Signed-off-by: kidd-kw.chen <kidd-kw.chen@mediatek.com>
---
 tests/meson.build                             |   5 +
 .../generateTest.py                           |  43 +++++
 tests/nnstreamer_filter_neuronsdk/runTest.sh  | 180 ++++++++++++++++++
 .../nnstreamer_filter_neuronsdk/tflite2dla.py | 128 +++++++++++++
 ...sample_1x4x4x4_two_input_one_output.tflite | Bin 0 -> 1012 bytes
 ...sample_1x4x4x4_two_input_two_output.tflite | Bin 0 -> 1936 bytes
 6 files changed, 356 insertions(+)
 create mode 100644 tests/nnstreamer_filter_neuronsdk/generateTest.py
 create mode 100644 tests/nnstreamer_filter_neuronsdk/runTest.sh
 create mode 100644 tests/nnstreamer_filter_neuronsdk/tflite2dla.py

diff --git a/tests/meson.build b/tests/meson.build
index 662ebdc8..efe4d335 100644
--- a/tests/meson.build
+++ b/tests/meson.build
@@ -372,6 +372,11 @@ if get_option('install-test')
     install_data(sources : 'nnstreamer_filter_pytorch/generateTest.py', install_dir : dir)
   endif
 
+  if neuronsdk_support_is_available
+    install_subdir('nnstreamer_filter_neuronsdk', install_dir: unittest_install_dir)
+    dir = join_paths(unittest_install_dir, 'nnstreamer_filter_neuronsdk')
+    install_data(sources : 'nnstreamer_filter_tensorflow2_lite/checkLabel.py', install_dir : dir)
+  endif
 
   if have_python3
     if flatbuf_support_is_available
diff --git a/tests/nnstreamer_filter_neuronsdk/generateTest.py b/tests/nnstreamer_filter_neuronsdk/generateTest.py
new file mode 100644
index 00000000..0f1eaa2e
--- /dev/null
+++ b/tests/nnstreamer_filter_neuronsdk/generateTest.py
@@ -0,0 +1,43 @@
+#!/usr/bin/env python3
+
+##
+# SPDX-License-Identifier: LGPL-2.1-only
+#
+# Copyright (C) 2023 Mediatek
+#
+# @file generateTest.py
+# @brief generate test data and golden test result
+# @author kidd-kw.chen <kidd-kw.chen@mediatek.com>
+
+import numpy as np
+
+def save_test_data_for_two_input_one_output(filename, shape, type):
+    # Because MDLA can only handle float16 and to avoid loss of 
+    # precision during inference, the values after the decimal point are discarded.
+    data = np.round(np.random.uniform(-100, 100, shape).astype(type))
+
+    with open(filename, 'wb') as file:
+        file.write(data.tobytes())
+
+    golden = data*2
+    with open(filename + '.golden', 'wb') as file:
+        file.write(golden.tobytes())
+
+
+def save_test_data_for_two_input_two_output(filename, shape, type):
+    # Because MDLA can only handle float16 and to avoid loss of 
+    # precision during inference, the values after the decimal point are discarded.
+    data = np.round(np.random.uniform(-100, 100, shape).astype(type))
+
+    with open(filename, 'wb') as file:
+        file.write(data.tobytes())
+
+    golden1 = data + 10.0
+    golden2 = data - 20.0
+    with open(filename + '.golden', 'ab') as file: 
+        file.write(golden2.tobytes())
+        file.write(golden1.tobytes())
+
+
+save_test_data_for_two_input_one_output('test_2_input_1_output.dat', [4,4,4,1], np.float32)
+save_test_data_for_two_input_two_output('test_2_input_2_output.dat', [4,4,4,1], np.float32)
diff --git a/tests/nnstreamer_filter_neuronsdk/runTest.sh b/tests/nnstreamer_filter_neuronsdk/runTest.sh
new file mode 100644
index 00000000..488c2a12
--- /dev/null
+++ b/tests/nnstreamer_filter_neuronsdk/runTest.sh
@@ -0,0 +1,180 @@
+#!/usr/bin/env bash
+##
+## SPDX-License-Identifier: LGPL-2.1-only
+##
+## @file runTest.sh
+## @author 
+## @date 
+## @brief SSAT Test Cases for NNStreamer
+##
+
+
+check_empty() 
+{ 
+    if [ -z "$1" ]; then 
+        echo "Variable is empty" 
+        return 0 
+    else 
+        echo "Variable is not empty" 
+        return 1 
+    fi 
+}
+
+
+if [[ "$SSATAPILOADED" != "1" ]]; then
+    SILENT=0
+    INDEPENDENT=1
+    search="ssat-api.sh"
+    source $search
+    printf "${Blue}Independent Mode${NC}"
+fi
+
+# This is compatible with SSAT (https://github.com/myungjoo/SSAT)
+testInit $1
+
+# NNStreamer and plugins path for test
+PATH_TO_PLUGIN="../../build"
+
+if [[ -d $PATH_TO_PLUGIN ]]; then
+    ini_path="${PATH_TO_PLUGIN}/ext/nnstreamer/tensor_filter"
+    if [[ -d ${ini_path} ]]; then
+        check=$(ls ${ini_path} | grep neuronsdk.so)
+        if [[ ! $check ]]; then
+            echo "Cannot find neuronsdk shared lib"
+            report
+            exit
+        fi
+    else
+        echo "Cannot find ${ini_path}"
+    fi
+else
+    ini_file="/etc/nnstreamer.ini"
+    if [[ -f ${ini_file} ]]; then
+        path=$(grep "^filters" ${ini_file})
+        key=${path%=*}
+        value=${path##*=}
+
+        if [[ $key != "filters" ]]; then
+            echo "String Error"
+            report
+            exit
+        fi
+
+        if [[ -d ${value} ]]; then
+            check=$(ls ${value} | grep neuronsdk.so)
+            if [[ ! $check ]]; then
+                echo "Cannot find neuronsdk shared lib"
+                report
+                exit
+            fi
+        else
+            echo "Cannot file ${value}"
+            report
+            exit
+        fi
+    else
+        echo "Cannot identify nnstreamer.ini"
+        report
+        exit
+    fi
+fi
+
+if [ "$SKIPGEN" == "YES" ]; then
+    echo "Test Case Generation Skipped"
+    sopath=$2
+else
+    echo "Test Case Generation Started"
+    python3 generateTest.py
+    sopath=$1
+fi
+
+PATH_TO_MODEL="../test_models/models/mobilenet_v1_1.0_224_quant.tflite"
+PATH_TO_DLA="../test_models/models/mobilenet_v1_1.0_224_quant.dla"
+PATH_TO_LABEL="../test_models/labels/labels.txt"
+PATH_TO_IMAGE="../test_models/data/orange.png"
+
+tensor=$(python3 tflite2dla.py ${PATH_TO_MODEL} ${PATH_TO_DLA} 2>&1 >/dev/null)
+echo ${tensor}
+
+gstTest "--gst-plugin-path=${PATH_TO_PLUGIN} filesrc location=${PATH_TO_IMAGE} ! pngdec ! videoscale ! imagefreeze ! videoconvert ! video/x-raw,format=RGB,framerate=0/1 ! tensor_converter ! tensor_filter framework=neuronsdk model=${PATH_TO_DLA} inputlayout=NHWC ${tensor} ! filesink location=neuronsdk.out.log" image-classification 0 0 $PERFORMANCE
+python3 checkLabel.py neuronsdk.out.log ${PATH_TO_LABEL} orange
+testResult $? image_classification "Golden test comparison" 0 1
+
+
+# Fail test for no tensor properties
+gstTest "--gst-plugin-path=${PATH_TO_PLUGIN} filesrc location=${PATH_TO_IMAGE} ! pngdec ! videoscale ! imagefreeze ! videoconvert ! video/x-raw,format=RGB,framerate=0/1 ! tensor_converter ! tensor_filter framework=neuronsdk model=${PATH_TO_DLA} inputlayout=NHWC ! filesink location=neuronsdk.out.log" no-tensor-properties 0 1 $PERFORMANCE
+
+
+# Fail test for incorrect tensor properties
+wrong_tensor="${tensor},1001:1"
+gstTest "--gst-plugin-path=${PATH_TO_PLUGIN} filesrc location=${PATH_TO_IMAGE} ! pngdec ! videoscale ! imagefreeze ! videoconvert ! video/x-raw,format=RGB,framerate=0/1 ! tensor_converter ! tensor_filter framework=neuronsdk model=${PATH_TO_DLA} inputlayout=NHWC ${wrong_tensor} ! filesink location=neuronsdk.out.log" incorrect-tensor-properties 0 1 $PERFORMANCE
+
+
+
+PATH_TO_MODEL="../test_models/models/sample_1x4x4x4_two_input_one_output.tflite"
+PATH_TO_DLA="../test_models/models/sample_1x4x4x4_two_input_one_output.dla"
+# This model is made with below simple python script:
+#   import tensorflow as tf
+#   from tensorflow import keras
+#   from tensorflow.keras.layers import *
+#   from tensorflow.keras import *
+#
+#   x1 = Input(batch_shape=(None, 4, 4, 4,))
+#   x2 = Input(batch_shape=(None, 4, 4, 4,))
+#   output = Add()([x1, x2])
+#   model = Model(inputs=[x1, x2], outputs=[output])
+#   model.compile()
+#   model.summary()
+#
+#   converter = tf.lite.TFLiteConverter.from_keras_model(model)
+#   tflite_model = converter.convert()
+#
+#   with open("tflite_model_kidd.tflite", "wb") as f:
+#       f.write(tflite_model)
+
+tensor=$(python3 tflite2dla.py ${PATH_TO_MODEL} ${PATH_TO_DLA} 2>&1 >/dev/null)
+echo ${tensor}
+
+gstTest "--gst-plugin-path=${PATH_TO_PLUGIN} multifilesrc location=\"test_2_input_1_output.dat\" blocksize=-1 num_buffers=2 ! application/octet-stream ! tensor_converter input-dim=4:4:4:1   input-type=float32 ! tee name=t t. ! queue ! mux.sink_0 t. ! queue ! mux.sink_1  tensor_mux name=mux sync_mode=nosync ! queue ! tensor_filter framework=neuronsdk        model=${PATH_TO_DLA} inputlayout=NHWC ${tensor} ! multifilesink location=neuronsdk.out.log" multi-inputs 0 0 $PERFORMANCE
+diff test_2_input_1_output.dat.golden neuronsdk.out.log
+testResult $? multi-inputs "Golden test comparison" 0 1
+
+
+
+
+PATH_TO_MODEL="../test_models/models/sample_1x4x4x4_two_input_two_output.tflite"
+PATH_TO_DLA="../test_models/models/sample_1x4x4x4_two_input_two_output.dla"
+# This model is made with below simple python script:
+#   import numpy as np 
+#   import tensorflow as tf 
+#
+#   input_1 = tf.keras.Input(batch_shape=(None, 4, 4, 4,), name='input_1') 
+#   input_2 = tf.keras.Input(batch_shape=(None, 4, 4, 4,), name='input_2')
+#
+#   add_1 = tf.constant(10.0, shape=[1, 4, 4, 4])
+#   add_2 = tf.constant(20.0, shape=[1, 4, 4, 4])
+#
+#   output_1 = tf.keras.layers.Add()([input_1, add_1])
+#   output_2 = tf.keras.layers.Subtract()([input_2, add_2])
+#
+#   model_outputs = [output_1, output_2] 
+#
+#   model = tf.keras.Model(inputs=[input_1, input_2], outputs=model_outputs)
+#   converter = tf.lite.TFLiteConverter.from_keras_model(model) 
+#   tflite_model = converter.convert() 
+#
+#   with open('my_model.2x2.tflite', 'wb') as f: 
+#	    f.write(tflite_model)
+
+tensor=$(python3 tflite2dla.py ${PATH_TO_MODEL} ${PATH_TO_DLA} 2>&1 >/dev/null)
+echo ${tensor}
+
+gstTest "--gst-plugin-path=${PATH_TO_PLUGIN} multifilesrc location=\"test_2_input_2_output.dat\" blocksize=-1 num_buffers=2 ! application/octet-stream ! tensor_converter input-dim=4:4:4:1   input-type=float32 ! tee name=t t. ! queue ! mux.sink_0 t. ! queue ! mux.sink_1  tensor_mux name=mux sync_mode=nosync ! queue ! tensor_filter framework=neuronsdk        model=${PATH_TO_DLA} inputlayout=NHWC ${tensor} ! multifilesink location=neuronsdk.out.log" multi-outputs 0 0 $PERFORMANCE
+diff test_2_input_2_output.dat.golden neuronsdk.out.log
+testResult $? multi-outputs "Golden test comparison" 0 1
+
+
+# Cleanup
+rm info *.log *.dat *.golden
+
+report
diff --git a/tests/nnstreamer_filter_neuronsdk/tflite2dla.py b/tests/nnstreamer_filter_neuronsdk/tflite2dla.py
new file mode 100644
index 00000000..73c52fa7
--- /dev/null
+++ b/tests/nnstreamer_filter_neuronsdk/tflite2dla.py
@@ -0,0 +1,128 @@
+#!/usr/bin/env python3
+
+##
+# SPDX-License-Identifier: LGPL-2.1-only
+#
+# Copyright (C) 2023 Mediatek
+#
+# @file tflite2dla.py
+# @brief compile tflite to dla file and query input and output tensor info
+# @author Kidd-kw.chen <Kidd-kw.chen@mediatek.com>
+
+import os
+import sys
+import re
+import logging
+import subprocess
+
+# Query supported backend of this platform and use the first backend to compile tflite model to dla file later.
+# We expect the first backend to be MDLA.
+def query_supported_backend():
+  batcmd = ('ncc-tflite --arch=?')
+  res = subprocess.run(batcmd, shell=True, check=False, executable='/bin/bash', stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)
+  result = res.stdout
+
+  reg = re.compile("\n.*?- (.*)")
+  match = re.findall(reg,result)
+  if match:
+    output_count = len(match)
+  else:
+    logging.error("FAIL to find backends")
+    exit("")
+
+  return match[0];
+
+# Query input/output tensor information by ncc-tflite.
+# Because we can't get input/output tensor information from dla file, so we have to 
+# query these information when we compile tflite model to dla.
+def parse_tensor_info(content, prefix):
+  compile_options = ' '
+
+  # Find Type
+  s = prefix + 'type=';
+  matches = re.findall(r' Type:\s*(\S+)', content) 
+  if matches:
+    count = len(matches)
+    for i in range(count):
+      t = matches[i]
+      if (t == 'kTfLiteFloat32'):
+        s += 'float32,'
+        compile_options += ' --relax-fp32 '
+      elif (t == 'kTfLiteInt32'):
+        s += 'int32,'
+      elif (t == 'kTfLiteUInt8'):
+        s += 'uint8,'
+      elif (t == 'kTfLiteInt64'):
+        s += 'float64,'
+      else:
+        logging.error("Unknown Type")
+        return ""
+  else: 
+    logging.error("FAIL to find Type")
+    return ""
+
+  s = s.rstrip(',')
+  logging.debug(s)
+
+  # Find Shape
+  s = s + ' ' + prefix + '=';
+  matches = re.findall(r' Shape:\s*\{\s*([\d\s,]+)\s*\}', content)
+  if matches:
+    count = len(matches)
+    for i in range(count):
+      numbers = matches[i].split(',')
+      for j in range(len(numbers)-1, -1, -1):
+        s += numbers[j] + ':'
+
+      s = s.rstrip(':')
+      s += ','
+  else: 
+    logging.error("FAIL to find Shape")
+    return ""
+
+  s = s.rstrip(',')
+  logging.debug(s)
+  return s, compile_options
+
+
+
+
+
+logging.basicConfig(
+    level=logging.INFO,
+    format="%(asctime)s [%(levelname)s] %(message)s",
+)
+
+# Query supported backend on platform
+arch = query_supported_backend()
+
+logging.debug(sys.argv[1]) # tflite model path
+logging.debug(sys.argv[2]) # dla file path
+
+
+
+# Get input/output tensor information
+batcmd = ('ncc-tflite --arch=%s %s --show-io-info' % (arch, sys.argv[1]))
+res = subprocess.run(batcmd, shell=True, check=False, executable='/bin/bash', stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)
+result = res.stdout
+
+parts = result.partition("# of output tensors")
+input_part = parts[0]
+output_part = parts[1] + parts[2]
+
+# Parse and convert input/output tensor information to nnstreamer filter properties
+input_tensor_info_str, compile_options = parse_tensor_info(input_part, 'input')
+output_tensor_info_str, compile_options = parse_tensor_info(output_part, 'output')
+
+tensor_info_str =  input_tensor_info_str + ' ' + output_tensor_info_str
+
+
+# Compile tflite to dla file
+batcmd = ('ncc-tflite --arch=%s %s -o %s %s' % (arch, sys.argv[1], sys.argv[2], compile_options))
+res = subprocess.run(batcmd, shell=True, check=False, executable='/bin/bash', stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)
+result = res.stdout
+
+exit(tensor_info_str)
+
+
+
-- 
2.18.0

