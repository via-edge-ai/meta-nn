From 0b25f214a6cb0439c1fc2e5583d844c41d58c0db Mon Sep 17 00:00:00 2001
From: Pedro Tsai <pedro.tsai@mediatek.com>
Date: Fri, 8 Mar 2024 16:04:37 -0800
Subject: [PATCH] armnn-use-tensorflowlib-c-api

---
 delegate/CMakeLists.txt                       |   6 +-
 delegate/cmake/Modules/FindTfLite.cmake       | 221 +++++++++---------
 samples/ObjectDetection/CMakeLists.txt        |   2 +-
 .../ObjectDetection/cmake/unit_tests.cmake    |   4 +-
 tests/InterfaceTests/CMakeLists.txt           |   4 +-
 5 files changed, 119 insertions(+), 118 deletions(-)

diff --git a/delegate/CMakeLists.txt b/delegate/CMakeLists.txt
index d92611f84..193aca5ab 100644
--- a/delegate/CMakeLists.txt
+++ b/delegate/CMakeLists.txt
@@ -71,7 +71,7 @@ endif()
 find_package(TfLiteSrc REQUIRED MODULE)
 find_package(TfLite REQUIRED MODULE)
 if (BUILD_CLASSIC_DELEGATE)
-    target_link_libraries(armnnDelegate PUBLIC ${TfLite_LIB})
+    target_link_libraries(armnnDelegate PUBLIC ${TfLite_LIBRARIES})
 
     #  lpthread and ldl are not required for Android
     if(NOT "${CMAKE_SYSTEM_NAME}" STREQUAL Android)
@@ -80,7 +80,7 @@ if (BUILD_CLASSIC_DELEGATE)
     endif()
 endif()
 if (BUILD_OPAQUE_DELEGATE)
-    target_link_libraries(armnnOpaqueDelegate PUBLIC ${TfLite_LIB})
+    target_link_libraries(armnnOpaqueDelegate PUBLIC ${TfLite_LIBRARIES})
 
     #  lpthread and ldl are not required for Android
     if(NOT "${CMAKE_SYSTEM_NAME}" STREQUAL Android)
@@ -373,4 +373,4 @@ if(BUILD_OPAQUE_DELEGATE)
     add_library(ArmnnDelegate::ArmnnOpaqueDelegate ALIAS armnnOpaqueDelegate)
 endif()
 
-####################################################
\ No newline at end of file
+####################################################
diff --git a/delegate/cmake/Modules/FindTfLite.cmake b/delegate/cmake/Modules/FindTfLite.cmake
index 20f93ca4a..ed332f9a3 100644
--- a/delegate/cmake/Modules/FindTfLite.cmake
+++ b/delegate/cmake/Modules/FindTfLite.cmake
@@ -15,129 +15,130 @@ unset(TFLITE_FOUND)
 #
 
 # First look for the static version of tensorflow lite
-find_library(TfLite_LIB NAMES "libtensorflow-lite.a" HINTS ${TFLITE_LIB_ROOT} ${TFLITE_LIB_ROOT}/tensorflow/lite)
+#find_library(TfLite_LIB NAMES "libtensorflow-lite.a" HINTS ${TFLITE_LIB_ROOT} ${TFLITE_LIB_ROOT}/tensorflow/lite ${TFLITE_LIB_ROOT}/tensorflow/lite/c)
 # If not found then, look for the dynamic library of tensorflow lite
-find_library(TfLite_LIB NAMES "libtensorflow_lite_all.so" "libtensorflowlite.so" HINTS ${TFLITE_LIB_ROOT} ${TFLITE_LIB_ROOT}/tensorflow/lite)
+find_library(TfLite_CPP_LIB NAMES "libtensorflowlite.so" HINTS ${TFLITE_LIB_ROOT} ${TFLITE_LIB_ROOT}/tensorflow/lite)
+find_library(TfLite_C_LIB NAMES "libtensorflowlite_c.so" HINTS ${TFLITE_LIB_ROOT} ${TFLITE_LIB_ROOT}/tensorflow/lite/c)
 
 # If the static library was found, gather all of its dependencies
-if (TfLite_LIB MATCHES .a$)
-    message("-- Static tensorflow lite library found, using for ArmNN build")
-    find_library(TfLite_abseilstrings_LIB "libabsl_strings.a"
-                 PATH ${TFLITE_LIB_ROOT}/_deps/abseil-cpp-build/absl/strings)
-    find_library(TfLite_abseil_synchronization_LIB "libabsl_synchronization.a"
-                 PATH ${TFLITE_LIB_ROOT}/_deps/abseil-cpp-build/absl/synchronization)
+#if (TfLite_LIB MATCHES .a$)
+#    message("-- Static tensorflow lite library found, using for ArmNN build")
+#    find_library(TfLite_abseilstrings_LIB "libabsl_strings.a"
+#                 PATH ${TFLITE_LIB_ROOT}/_deps/abseil-cpp-build/absl/strings)
+#    find_library(TfLite_abseil_synchronization_LIB "libabsl_synchronization.a"
+#                 PATH ${TFLITE_LIB_ROOT}/_deps/abseil-cpp-build/absl/synchronization)
     # Required for building TensorFlow in Debug
-    find_library(TfLite_abseil_graphCycle_internal_LIB "libabsl_graphcycles_internal.a"
-                 PATH ${TFLITE_LIB_ROOT}/_deps/abseil-cpp-build/absl/synchronization)
+#    find_library(TfLite_abseil_graphCycle_internal_LIB "libabsl_graphcycles_internal.a"
+#                 PATH ${TFLITE_LIB_ROOT}/_deps/abseil-cpp-build/absl/synchronization)
 
 
-    find_library(TfLite_farmhash_LIB "libfarmhash.a"
-                 PATH ${TFLITE_LIB_ROOT}/_deps/farmhash-build)
-    find_library(TfLite_fftsg_LIB "libfft2d_fftsg.a"
-                 PATH ${TFLITE_LIB_ROOT}/_deps/fft2d-build)
-    find_library(TfLite_fftsg2d_LIB "libfft2d_fftsg2d.a"
-                 PATH ${TFLITE_LIB_ROOT}/_deps/fft2d-build)
-    find_library(TfLite_flatbuffers_LIB "libflatbuffers.a"
-                 PATH ${TFLITE_LIB_ROOT}/_deps/flatbuffers-build)
-    find_library(TfLite_cpuinfo_LIB "libcpuinfo.a" PATH
-                 ${TFLITE_LIB_ROOT}/_deps/cpuinfo-build)
+#    find_library(TfLite_farmhash_LIB "libfarmhash.a"
+#                 PATH ${TFLITE_LIB_ROOT}/_deps/farmhash-build)
+#    find_library(TfLite_fftsg_LIB "libfft2d_fftsg.a"
+#                 PATH ${TFLITE_LIB_ROOT}/_deps/fft2d-build)
+#    find_library(TfLite_fftsg2d_LIB "libfft2d_fftsg2d.a"
+#                 PATH ${TFLITE_LIB_ROOT}/_deps/fft2d-build)
+#    find_library(TfLite_flatbuffers_LIB "libflatbuffers.a"
+#                 PATH ${TFLITE_LIB_ROOT}/_deps/flatbuffers-build)
+#    find_library(TfLite_cpuinfo_LIB "libcpuinfo.a" PATH
+#                 ${TFLITE_LIB_ROOT}/_deps/cpuinfo-build)
 
     # All remaining libraries are part of libruy.
-    find_library(TfLite_ruy_allocator_LIB "libruy_allocator.a" PATH
-                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
-    find_library(TfLite_ruy_apply_multiplier_LIB "libruy_apply_multiplier.a" PATH
-                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
-    find_library(TfLite_ruy_blocking_counter_LIB "libruy_blocking_counter.a" PATH
-                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
-    find_library(TfLite_ruy_block_map_LIB "libruy_block_map.a" PATH
-                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
-    find_library(TfLite_ruy_context_LIB "libruy_context.a" PATH
-                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
-    find_library(TfLite_ruy_context_get_ctx_LIB "libruy_context_get_ctx.a" PATH
-                ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
-    find_library(TfLite_ruy_cpuinfo_LIB "libruy_cpuinfo.a" PATH
-                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
-    find_library(TfLite_ruy_ctx_LIB "libruy_ctx.a" PATH
-                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
-    find_library(TfLite_ruy_denormal_LIB "libruy_denormal.a" PATH
-                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
-    find_library(TfLite_ruy_frontend_LIB "libruy_frontend.a" PATH
-                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
-    find_library(TfLite_ruy_have_built_path_for_avx2_fma_LIB "libruy_have_built_path_for_avx2_fma.a" PATH
-                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
-    find_library(TfLite_ruy_have_built_path_for_avx512_LIB "libruy_have_built_path_for_avx512.a" PATH
-                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
-    find_library(TfLite_ruy_have_built_path_for_avx_LIB "libruy_have_built_path_for_avx.a" PATH
-                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
-    find_library(TfLite_ruy_kernel_arm_LIB "libruy_kernel_arm.a" PATH
-                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
-    find_library(TfLite_ruy_kernel_avx2_fma_LIB "libruy_kernel_avx2_fma.a" PATH
-                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
-    find_library(TfLite_ruy_kernel_avx512_LIB "libruy_kernel_avx512.a" PATH
-                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
-    find_library(TfLite_ruy_kernel_avx_LIB "libruy_kernel_avx.a" PATH
-                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
-    find_library(TfLite_ruy_pack_arm_LIB "libruy_pack_arm.a" PATH
-                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
-    find_library(TfLite_ruy_pack_avx2_fma_LIB "libruy_pack_avx2_fma.a" PATH
-                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
-    find_library(TfLite_ruy_pack_avx512_LIB "libruy_pack_avx512.a" PATH
-                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
-    find_library(TfLite_ruy_pack_avx_LIB "libruy_pack_avx.a" PATH
-                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
-    find_library(TfLite_ruy_prepacked_cache_LIB "libruy_prepacked_cache.a" PATH
-                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
-    find_library(TfLite_ruy_prepare_packed_matrices_LIB "libruy_prepare_packed_matrices.a" PATH
-                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
-    find_library(TfLite_ruy_system_aligned_alloc_LIB "libruy_system_aligned_alloc.a" PATH
-                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
-    find_library(TfLite_ruy_threadpool_LIB "libruy_thread_pool.a" PATH
-                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
-    find_library(TfLite_ruy_trmul_LIB "libruy_trmul.a" PATH
-                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
-    find_library(TfLite_ruy_tune_LIB "libruy_tune.a" PATH
-                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
-    find_library(TfLite_ruy_wait_LIB "libruy_wait.a" PATH
-                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
-    find_library(TfLite_ruy_profiler_LIB "libruy_profiler_instrumentation.a" PATH
-                ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy/profiler)
-    find_library(TfLite_pthread_pool_LIB "libpthreadpool.a" PATH
-                ${TFLITE_LIB_ROOT}/pthreadpool)
+#    find_library(TfLite_ruy_allocator_LIB "libruy_allocator.a" PATH
+#                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
+#    find_library(TfLite_ruy_apply_multiplier_LIB "libruy_apply_multiplier.a" PATH
+#                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
+#    find_library(TfLite_ruy_blocking_counter_LIB "libruy_blocking_counter.a" PATH
+#                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
+#    find_library(TfLite_ruy_block_map_LIB "libruy_block_map.a" PATH
+#                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
+#    find_library(TfLite_ruy_context_LIB "libruy_context.a" PATH
+#                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
+#    find_library(TfLite_ruy_context_get_ctx_LIB "libruy_context_get_ctx.a" PATH
+#                ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
+#    find_library(TfLite_ruy_cpuinfo_LIB "libruy_cpuinfo.a" PATH
+#                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
+#    find_library(TfLite_ruy_ctx_LIB "libruy_ctx.a" PATH
+#                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
+#    find_library(TfLite_ruy_denormal_LIB "libruy_denormal.a" PATH
+#                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
+#    find_library(TfLite_ruy_frontend_LIB "libruy_frontend.a" PATH
+#                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
+#    find_library(TfLite_ruy_have_built_path_for_avx2_fma_LIB "libruy_have_built_path_for_avx2_fma.a" PATH
+#                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
+#    find_library(TfLite_ruy_have_built_path_for_avx512_LIB "libruy_have_built_path_for_avx512.a" PATH
+#                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
+#    find_library(TfLite_ruy_have_built_path_for_avx_LIB "libruy_have_built_path_for_avx.a" PATH
+#                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
+#    find_library(TfLite_ruy_kernel_arm_LIB "libruy_kernel_arm.a" PATH
+#                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
+#    find_library(TfLite_ruy_kernel_avx2_fma_LIB "libruy_kernel_avx2_fma.a" PATH
+#                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
+#    find_library(TfLite_ruy_kernel_avx512_LIB "libruy_kernel_avx512.a" PATH
+#                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
+#    find_library(TfLite_ruy_kernel_avx_LIB "libruy_kernel_avx.a" PATH
+#                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
+#    find_library(TfLite_ruy_pack_arm_LIB "libruy_pack_arm.a" PATH
+#                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
+#    find_library(TfLite_ruy_pack_avx2_fma_LIB "libruy_pack_avx2_fma.a" PATH
+#                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
+#    find_library(TfLite_ruy_pack_avx512_LIB "libruy_pack_avx512.a" PATH
+#                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
+#    find_library(TfLite_ruy_pack_avx_LIB "libruy_pack_avx.a" PATH
+#                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
+#    find_library(TfLite_ruy_prepacked_cache_LIB "libruy_prepacked_cache.a" PATH
+#                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
+#    find_library(TfLite_ruy_prepare_packed_matrices_LIB "libruy_prepare_packed_matrices.a" PATH
+#                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
+#    find_library(TfLite_ruy_system_aligned_alloc_LIB "libruy_system_aligned_alloc.a" PATH
+#                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
+#    find_library(TfLite_ruy_threadpool_LIB "libruy_thread_pool.a" PATH
+#                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
+#    find_library(TfLite_ruy_trmul_LIB "libruy_trmul.a" PATH
+#                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
+#    find_library(TfLite_ruy_tune_LIB "libruy_tune.a" PATH
+#                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
+#    find_library(TfLite_ruy_wait_LIB "libruy_wait.a" PATH
+#                 ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy)
+#    find_library(TfLite_ruy_profiler_LIB "libruy_profiler_instrumentation.a" PATH
+#                ${TFLITE_LIB_ROOT}/_deps/ruy-build/ruy/profiler)
+#    find_library(TfLite_pthread_pool_LIB "libpthreadpool.a" PATH
+#                ${TFLITE_LIB_ROOT}/pthreadpool)
 
     ## Set TFLITE_FOUND if all libraries are satisfied for static lib
-    find_package_handle_standard_args(TfLite DEFAULT_MSG TfLite_LIB TfLite_abseilstrings_LIB TfLite_farmhash_LIB TfLite_fftsg_LIB TfLite_fftsg2d_LIB
-                                      TfLite_flatbuffers_LIB TfLite_ruy_allocator_LIB TfLite_ruy_apply_multiplier_LIB TfLite_ruy_blocking_counter_LIB
-                                      TfLite_ruy_block_map_LIB TfLite_ruy_context_LIB TfLite_ruy_context_get_ctx_LIB TfLite_ruy_cpuinfo_LIB
-                                      TfLite_ruy_ctx_LIB TfLite_ruy_denormal_LIB TfLite_ruy_frontend_LIB TfLite_ruy_have_built_path_for_avx2_fma_LIB
-                                      TfLite_ruy_have_built_path_for_avx512_LIB TfLite_ruy_have_built_path_for_avx_LIB TfLite_ruy_kernel_arm_LIB
-                                      TfLite_ruy_kernel_avx2_fma_LIB TfLite_ruy_kernel_avx512_LIB TfLite_ruy_kernel_avx_LIB TfLite_ruy_pack_arm_LIB
-                                      TfLite_ruy_pack_avx2_fma_LIB TfLite_ruy_pack_avx512_LIB TfLite_ruy_pack_avx_LIB TfLite_ruy_prepacked_cache_LIB
-                                      TfLite_ruy_prepare_packed_matrices_LIB TfLite_ruy_system_aligned_alloc_LIB TfLite_ruy_threadpool_LIB
-                                      TfLite_ruy_trmul_LIB TfLite_ruy_tune_LIB TfLite_ruy_wait_LIB TfLite_ruy_profiler_LIB TfLite_cpuinfo_LIB
-                                      TfLite_abseil_synchronization_LIB TfLite_abseil_graphCycle_internal_LIB TfLite_pthread_pool_LIB)
+#    find_package_handle_standard_args(TfLite DEFAULT_MSG TfLite_LIB TfLite_abseilstrings_LIB TfLite_farmhash_LIB TfLite_fftsg_LIB TfLite_fftsg2d_LIB
+#                                      TfLite_flatbuffers_LIB TfLite_ruy_allocator_LIB TfLite_ruy_apply_multiplier_LIB TfLite_ruy_blocking_counter_LIB
+#                                      TfLite_ruy_block_map_LIB TfLite_ruy_context_LIB TfLite_ruy_context_get_ctx_LIB TfLite_ruy_cpuinfo_LIB
+#                                      TfLite_ruy_ctx_LIB TfLite_ruy_denormal_LIB TfLite_ruy_frontend_LIB TfLite_ruy_have_built_path_for_avx2_fma_LIB
+#                                      TfLite_ruy_have_built_path_for_avx512_LIB TfLite_ruy_have_built_path_for_avx_LIB TfLite_ruy_kernel_arm_LIB
+#                                      TfLite_ruy_kernel_avx2_fma_LIB TfLite_ruy_kernel_avx512_LIB TfLite_ruy_kernel_avx_LIB TfLite_ruy_pack_arm_LIB
+#                                      TfLite_ruy_pack_avx2_fma_LIB TfLite_ruy_pack_avx512_LIB TfLite_ruy_pack_avx_LIB TfLite_ruy_prepacked_cache_LIB
+#                                      TfLite_ruy_prepare_packed_matrices_LIB TfLite_ruy_system_aligned_alloc_LIB TfLite_ruy_threadpool_LIB
+#                                      TfLite_ruy_trmul_LIB TfLite_ruy_tune_LIB TfLite_ruy_wait_LIB TfLite_ruy_profiler_LIB TfLite_cpuinfo_LIB
+#                                      TfLite_abseil_synchronization_LIB TfLite_abseil_graphCycle_internal_LIB TfLite_pthread_pool_LIB)
     # Set external variables for usage in CMakeLists.txt
-    if (TFLITE_FOUND)
+#    if (TFLITE_FOUND)
         # WARNING! The order of these libraries is critical. Moving them
         # around will result in linker errors in DelegateUnitTests.
-        set(TfLite_LIB ${TfLite_LIB} ${TfLite_abseilstrings_LIB} ${TfLite_farmhash_LIB} ${TfLite_fftsg_LIB} ${TfLite_fftsg2d_LIB} ${TfLite_flatbuffers_LIB}
-                                     ${TfLite_ruy_allocator_LIB} ${TfLite_ruy_apply_multiplier_LIB} ${TfLite_ruy_frontend_LIB} ${TfLite_ruy_trmul_LIB}
-                                     ${TfLite_ruy_threadpool_LIB} ${TfLite_ruy_blocking_counter_LIB} ${TfLite_ruy_block_map_LIB} ${TfLite_ruy_context_LIB}
-                                     ${TfLite_ruy_context_get_ctx_LIB} ${TfLite_ruy_cpuinfo_LIB} ${TfLite_ruy_ctx_LIB} ${TfLite_ruy_denormal_LIB}
-                                     ${TfLite_ruy_have_built_path_for_avx2_fma_LIB} ${TfLite_ruy_have_built_path_for_avx512_LIB}
-                                     ${TfLite_ruy_have_built_path_for_avx_LIB} ${TfLite_ruy_kernel_arm_LIB} ${TfLite_ruy_kernel_avx2_fma_LIB}
-                                     ${TfLite_ruy_kernel_avx512_LIB} ${TfLite_ruy_kernel_avx_LIB} ${TfLite_ruy_pack_arm_LIB}
-                                     ${TfLite_ruy_pack_avx2_fma_LIB} ${TfLite_ruy_pack_avx512_LIB} ${TfLite_ruy_pack_avx_LIB} ${TfLite_ruy_prepacked_cache_LIB}
-                                     ${TfLite_ruy_prepare_packed_matrices_LIB} ${TfLite_ruy_system_aligned_alloc_LIB}
-                                     ${TfLite_ruy_tune_LIB} ${TfLite_ruy_wait_LIB} ${TfLite_ruy_profiler_LIB}
-                                     ${TfLite_cpuinfo_LIB} ${TfLite_abseil_synchronization_LIB} ${TfLite_abseil_graphCycle_internal_LIB} ${TfLite_pthread_pool_LIB})
-    endif ()
-elseif (TfLite_LIB MATCHES .so$)
-    message("-- Dynamic tensorflow lite library found, using for ArmNN build")
-    find_package_handle_standard_args(TfLite DEFAULT_MSG TfLite_LIB)
+#        set(TfLite_LIB ${TfLite_LIB} ${TfLite_abseilstrings_LIB} ${TfLite_farmhash_LIB} ${TfLite_fftsg_LIB} ${TfLite_fftsg2d_LIB} ${TfLite_flatbuffers_LIB}
+#                                     ${TfLite_ruy_allocator_LIB} ${TfLite_ruy_apply_multiplier_LIB} ${TfLite_ruy_frontend_LIB} ${TfLite_ruy_trmul_LIB}
+#                                     ${TfLite_ruy_threadpool_LIB} ${TfLite_ruy_blocking_counter_LIB} ${TfLite_ruy_block_map_LIB} ${TfLite_ruy_context_LIB}
+#                                     ${TfLite_ruy_context_get_ctx_LIB} ${TfLite_ruy_cpuinfo_LIB} ${TfLite_ruy_ctx_LIB} ${TfLite_ruy_denormal_LIB}
+#                                     ${TfLite_ruy_have_built_path_for_avx2_fma_LIB} ${TfLite_ruy_have_built_path_for_avx512_LIB}
+#                                     ${TfLite_ruy_have_built_path_for_avx_LIB} ${TfLite_ruy_kernel_arm_LIB} ${TfLite_ruy_kernel_avx2_fma_LIB}
+#                                     ${TfLite_ruy_kernel_avx512_LIB} ${TfLite_ruy_kernel_avx_LIB} ${TfLite_ruy_pack_arm_LIB}
+#                                     ${TfLite_ruy_pack_avx2_fma_LIB} ${TfLite_ruy_pack_avx512_LIB} ${TfLite_ruy_pack_avx_LIB} ${TfLite_ruy_prepacked_cache_LIB}
+#                                     ${TfLite_ruy_prepare_packed_matrices_LIB} ${TfLite_ruy_system_aligned_alloc_LIB}
+#                                     ${TfLite_ruy_tune_LIB} ${TfLite_ruy_wait_LIB} ${TfLite_ruy_profiler_LIB}
+#                                     ${TfLite_cpuinfo_LIB} ${TfLite_abseil_synchronization_LIB} ${TfLite_abseil_graphCycle_internal_LIB} ${TfLite_pthread_pool_LIB})
+#    endif ()
+#if (TfLite_LIB MATCHES .so$)
+#    message("-- Dynamic tensorflow lite library found, using for ArmNN build")
+find_package_handle_standard_args(TfLite DEFAULT_MSG TfLite_C_LIB TfLite_CPP_LIB)
     ## Set external variables for usage in CMakeLists.txt
     if (TFLITE_FOUND)
-        set(TfLite_LIB ${TfLite_LIB})
+        set(TfLite_LIBRARIES ${TfLite_C_LIB} ${TfLite_CPP_LIB})
     endif ()
-else()
-    message(FATAL_ERROR "Could not find a tensorflow lite library to use")
-endif()
+#else()
+#    message(FATAL_ERROR "Could not find a tensorflow lite library to use")
+#endif()
diff --git a/samples/ObjectDetection/CMakeLists.txt b/samples/ObjectDetection/CMakeLists.txt
index 953c4ed11..927a1be49 100644
--- a/samples/ObjectDetection/CMakeLists.txt
+++ b/samples/ObjectDetection/CMakeLists.txt
@@ -97,7 +97,7 @@ add_executable("${APP_TARGET_NAME}" ${SOURCES} ${CVUTILS_SOURCES} ${UTILS_SOURCE
 
 if( USE_ARMNN_DELEGATE )
     set(CMAKE_CXX_FLAGS " -ldl -lrt -Wl,--copy-dt-needed-entries")
-    target_link_libraries("${APP_TARGET_NAME}" PUBLIC ${TfLite_LIB})
+    target_link_libraries("${APP_TARGET_NAME}" PUBLIC ${TfLite_LIBRARIES})
 
     target_link_libraries("${APP_TARGET_NAME}" PUBLIC tflite_headers)
     target_include_directories("${APP_TARGET_NAME}" PUBLIC ${Flatbuffers_INCLUDE_DIR})
diff --git a/samples/ObjectDetection/cmake/unit_tests.cmake b/samples/ObjectDetection/cmake/unit_tests.cmake
index 6b2a9bb47..ce36ece7c 100644
--- a/samples/ObjectDetection/cmake/unit_tests.cmake
+++ b/samples/ObjectDetection/cmake/unit_tests.cmake
@@ -70,8 +70,8 @@ target_include_directories("${TEST_TARGET_NAME}" PUBLIC ${TEST_TPIP_INCLUDE}
 target_link_libraries("${TEST_TARGET_NAME}" PUBLIC ${ARMNN_LIBS} ${OPENCV_LIBS} ${FFMPEG_LIBS})
 if( USE_ARMNN_DELEGATE )
     set(CMAKE_CXX_FLAGS " -ldl -lrt -Wl,--copy-dt-needed-entries")
-    target_link_libraries("${TEST_TARGET_NAME}" PUBLIC ${TfLite_LIB})
+    target_link_libraries("${TEST_TARGET_NAME}" PUBLIC ${TfLite_LIBRARIES})
     target_link_libraries("${TEST_TARGET_NAME}" PUBLIC tflite_headers)
     target_include_directories("${TEST_TARGET_NAME}" PUBLIC ${Flatbuffers_INCLUDE_DIR})
     target_link_libraries("${TEST_TARGET_NAME}" PUBLIC ${Flatbuffers_LIB})
-endif()
\ No newline at end of file
+endif()
diff --git a/tests/InterfaceTests/CMakeLists.txt b/tests/InterfaceTests/CMakeLists.txt
index 6521e7c30..be7424041 100644
--- a/tests/InterfaceTests/CMakeLists.txt
+++ b/tests/InterfaceTests/CMakeLists.txt
@@ -88,7 +88,7 @@ target_include_directories(ClassicDelegateTest BEFORE PUBLIC ${ARMNN_LIB_INCLUDE
                                                              ${TFLITE_INCLUDE}
                                                              ${ARMNN_COMMON_DELEGATE_INCLUDE}
                                                              ${ARMNN_CLASSIC_DELEGATE_INCLUDE})
-target_link_libraries(ClassicDelegateTest ${TfLite_LIB}
+target_link_libraries(ClassicDelegateTest ${TfLite_LIBRARIES}
                                           ${ARMNN_CLASSIC_DELEGATE_LIB}
                                           ${ARMNN_LIB}
                                           ${Flatbuffers_LIB}
@@ -115,7 +115,7 @@ target_include_directories(OpaqueDelegateTest BEFORE PUBLIC ${ARMNN_LIB_INCLUDE}
 target_link_libraries(OpaqueDelegateTest ${ARMNN_OPAQUE_DELEGATE_LIB} 
                                          ${ARMNN_LIB}
                                          ${TfLite_Extra_Absl_LIB}
-                                         ${TfLite_LIB}
+                                         ${TfLite_LIBRARIES}
                                          ${Flatbuffers_LIB}
                                          ${CMAKE_THREAD_LIBS_INIT}
                                          ${CMAKE_DL_LIBS})
